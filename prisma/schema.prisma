    generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                 String         @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    username           String?        @unique
    email              String?        @unique
    image              String?
    password           String?
    provider           String?
    pro                Boolean        @default(false)
    termsAccepted      Boolean        @default(false)
    emailNotifications Boolean?       @default(true)
    inAppNotifications Boolean?       @default(false)
    preferredTheme     String?        @default("system")
    preferredLanguage  String?        @default("en")
    preferredTimezone  String?        @default("UTC")
    subscriptions      Subscription[]
    payments           Payment[]
    ResetToken         ResetToken[]
    favourites         String[]
    emailVerified      DateTime?
}

model Subscription {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    plan      String
    status    String
    startDate DateTime @default(now())
    endDate   DateTime
    paymentId String   @unique @db.ObjectId
    payment   Payment  @relation(fields: [paymentId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    razorpayOrderId   String?
    razorpayPaymentId String?
}

model Payment {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    userId            String        @db.ObjectId
    user              User          @relation(fields: [userId], references: [id])
    amount            Float
    currency          String
    receiptId         String?
    status            String
    razorpayOrderId   String        @unique
    razorpayPaymentId String?
    method            String?
    description       String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    subscription      Subscription?
}

model Newsletter {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String
    subject   String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ResetToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    expires   DateTime
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Otp {
    id        String   @id @default(cuid()) @map("_id")
    email     String   @unique
    code      String
    expiresAt DateTime
    attempts  Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
