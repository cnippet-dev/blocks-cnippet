generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// model User {
//   id            String       @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   username      String?      @unique
//   email         String?      @unique
//   image         String?
//   password      String?
//   provider      String?
//   termsAccepted Boolean      @default(false)
//   emailVerified DateTime?
//   createdAt     DateTime     @default(now())
//   updatedAt     DateTime     @updatedAt
//   resetTokens   ResetToken[]
// }

model User {
    id                 String         @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    username           String?        @unique
    email              String?        @unique
    emailVerified      DateTime?
    image              String?
    password           String?
    provider           String?
    termsAccepted      Boolean        @default(false)
    preferredTheme     String?        @default("system")
    emailNotifications Boolean?       @default(true)
    inAppNotifications Boolean?       @default(false)
    preferredLanguage  String?        @default("en")
    preferredTimezone  String?        @default("UTC")
    pro                Boolean        @default(false) // New field to track pro status
    // accounts           Account[]
    // sessions           Session[]
    subscriptions      Subscription[]
    payments           Payment[]
    ResetToken         ResetToken[]
}

model Subscription {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    plan      String // e.g., "PRO", "ENTERPRISE" (used 'plan' in old code)
    status    String // e.g., 'ACTIVE', 'CANCELLED', 'EXPIRED'
    startDate DateTime @default(now())
    endDate   DateTime
    paymentId String   @unique @db.ObjectId // Link to the Payment record
    payment   Payment  @relation(fields: [paymentId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Optionally, you might want to store Razorpay specific IDs directly here for easy lookup
    razorpayOrderId   String?
    razorpayPaymentId String?
}

model Payment {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    userId            String        @db.ObjectId
    user              User          @relation(fields: [userId], references: [id])
    amount            Float
    currency          String
    receiptId         String? // From Razorpay options.receipt
    status            String // e.g., 'CREATED', 'PENDING', 'SUCCESS', 'FAILED'
    razorpayOrderId   String        @unique // Razorpay's order ID
    razorpayPaymentId String?       @unique // Razorpay's payment ID (null initially)
    method            String? // e.g., 'card', 'upi', 'netbanking'
    description       String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    subscription      Subscription?
}

model Newsletter {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String
    subject   String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ResetToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    expires   DateTime
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Otp {
    id        String   @id @default(cuid()) @map("_id")
    email     String   @unique
    code      String
    expiresAt DateTime
    attempts  Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
